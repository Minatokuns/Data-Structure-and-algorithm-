Array are static type so size cant be changed once fixed.
int[] arr = new int[10];
int arr2[] = {10, 20, 30, 40, 50};
char arr1[] = {‘g’, ‘e’, ‘e’, ‘k’, ‘s’}; *char so elements are in 'char'*
Different for different data type like for String " " is used.
String[] aArray = new String[5];
String[] bArray = {"a","b","c", "d", "e"};
String[] cArray = new String[]{"a","b","c","d","e"};
Arrays.toString(intArray); // [1, 2, 3, 4, 5] (print with brackets)
Arrays.deepToString(intArr); //use it for printing 2d array [[10, 20, 15, 22, 35]]
int[] combinedIntArray = ArrayUtils.addAll(intArray, intArray2); //concatinating 2 arrays
ArrayUtils.reverse(intArray); //reverseing contents
int[] removed = ArrayUtils.removeElement(intArray, 3);//removes the 1st occurence of 3 in intArray and create a new array
Arrays.binarySearch(intArr, intKey); //returns the index 
Arrays.copyOf(intArr, 10); //increases the size of the array (10 is the size we provided)
Arrays.fill(intArr, intKey);



Print an array : 
int[] arr = { 1, 2, 3, 4, 5 };
Arrays.toString(arr); // print arr as a string // [1, 2, 3, 4, 5] (print with brackets)

HASHMAP::::::::::
Initialize : HashMap<Integer,Integer> hmap= new HashMap<>();  // <key,value> 
hmap.containsKey(key)// if present return otherwise false
hmap.get(key) // return value of that key
hmap.put(key,value) // adding pair to hashmap
hmap.put(nums[i],new_map.getOrDefault(nums[i],0)+1); //updating value
HASHSET:::::::::
creating a hashset with values 
Set<Character> set = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')); OR
Set<Character> chSet = Set.of('a','e','i','o','u','y'); or
Set<String> set = new HashSet<String>(Arrays.asList(stringArray));

STRING:::::::::::
String xStr = String.valueOf(x); // store the int value as a string
char[] ch = str.toCharArray(); //string to char array

ArrayList:::::::
List<String> list = new ArrayList<>(); //empty and dynamic
List<List<Integer>> arr = new ArrayList<List<Integer>>();
list.size();
String[] array = {"foo", "bar"};
List<String> list = Arrays.asList(array); //fixed size
List pets = Arrays.asList(new String[] { "cat", "dog", "fish" });
arrayList.toArray(stringArr); //arraylist(arraylist name) , stringArr(array name) 
a1.add(i);
a1.size();
a1.get(i);
boolean b = Arrays.asList(stringArray).contains("a"); // arraylist contains elment checking
Collections.sort(a1); //sorting arraylist
Collections.binarySearch(al, 10);

Queue:::::
Q.add();
Q.offer(10); //if element added return true else false
Q.peek();// returns first element in queue

Priority Queue:::::
PriorityQueue<Integer> pq = new PriorityQueue<Integer>();//initialization (default priority increasing order)
PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());//initialization (priority decending order)
pq.add();

pq.poll(); //remove and return top value (returns null if empty throws no error)
